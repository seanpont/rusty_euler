use primes;
use collect;

/// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
/// number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
///
/// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
///
/// Let us list the factors of the first seven triangle numbers:
///
///  1: 1
///  3: 1,3
///  6: 1,2,3,6
/// 10: 1,2,5,10
/// 15: 1,3,5,15
/// 21: 1,3,7,21
/// 28: 1,2,4,7,14,28
/// We can see that 28 is the first triangle number to have over five divisors.
///
/// What is the value of the first triangle number to have over five hundred divisors?
pub fn solve() {
  let sieve = primes::Sieve::new(100000);
  println!("constructed sieve");
  let mut max_divisors = 0;
  for n in 1..100000 {
    let (a, b) = if n % 2 == 0 { (n/2, n+1) } else { (n, (n + 1) / 2) };
    let mut pf = sieve.factorize(a);
    pf.extend(sieve.factorize(b));
    let num_divisors = collect::count_map(&pf).values().map(|x| x+1).product::<i64>();
    if num_divisors > max_divisors {
      println!("{} has {} divisors", (n * (n + 1) / 2), num_divisors);
      max_divisors = num_divisors;
      if num_divisors > 500 { break; }
    }
  }
}

